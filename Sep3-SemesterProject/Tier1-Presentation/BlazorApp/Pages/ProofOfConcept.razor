@page "/ProofOfConcept"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPatientService patientService;

<div class="card">
    <h3>Create User</h3>
    <div class="form-group field">
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>User id:</label>
        <input type="text" @bind="id" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Patient name:</label>
        <input type="text" @bind="name" @bind:event="oninput"/>
    </div>
    <div class="button-row">
        <button @onclick="Register" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private string id = "";
    private string name = "";
    private string resultMsg = "";
    private string color = "";

    private async Task Register()
    {
        resultMsg = "";

        try
        {
            // register 
            int idAsInt = int.Parse(id);
            await patientService.ProofOfConcept(new RegisterPatientDto("idAsInt",name, "pass")); // Error here
            
            id = "";
            name = "";
            resultMsg = "Patient successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
        
    }
}